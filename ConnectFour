// Cory Vo
// Connect Four

import java.util.Scanner;

// A class that represents a game of connect four that implements the AbstractStrategyGame
// interface.
public class ConnectFour implements AbstractStrategyGame {
    private char[][] board;
    private boolean isXTurn;

    // Behavior: Makes the 6x7 Connect Four board
    public ConnectFour(){
        board = new char [6][7];
        populateBoard();
        isXTurn = true;
    }

    // Behavior: Checks if there is winner. If there is a winner, a positive statement will be returned.
    // If not, a negative statement will be returned.
    // Return: Gives back a true or false depending on whether the game is over.
    public boolean isGameOver(){
        return getWinner() >= 0;
    }

    // Behavior: Creates the instructions text that will be presented to the users so they understand the game.
    // Return: Gives back this list of instructions.
    public String instructions(){
        String result = "Welcome to Connect Four! In this game the objective is to get four of your pieces to ";
        result += "either vertically, horizontally, or diagonally align. If you get this to happen, you win the game! ";
        result += "(Make sure to block you opponent when ever you get the change). To play the game, you will be ";
        result += "prompted to pick a column. A column number is located over the all the different columns, so type ";
        result += "in which column to place your piece. When you place your piece, it will drop down to the lowest ";
        result += "possible space in that column. Good luck and have fun :) ";
        return result;
    }

    // Behavior: Creates the board that the users will see, based on where they have decided to place their pieces.
    // A (-) will represent an empty space. An (X) will reresent player 1's piece and an (O) will represent player 2's piece.
    // Return: Gives back the game board.
    public String toString(){
        String result = " 0 1 2 3 4 5 6 \n";
        for (int i = 0; i < board.length; i++) {
            result += "|";
            for (int j = 0; j < board[i].length; j++) {
                result += board[i][j] + "|";
            }
            result += "\n";
        }
        return result;
    }

    // Behavior: Checks if any of the players have won the game by having 4 pieces consecutively in a vertical, horizontal or diagonal pattern.
    // It also checks if there has been a tie, where there are no spaces available and no one has won or if the game is still ongoing.
    // Return: If a player has won, it will return either 1 or 2 depending on which player won. It will return -1 if the game is not yet over
    // It will return 0 if there is a tie.
    public int getWinner(){
        // Check horizontal win
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length - 3; j++){ 
                if(board[i][j] == board[i][j+1] && board[i][j+1] == board[i][j+2] && board[i][j+2] == board[i][j+3] && board[i][j] != '-'){
                    return board[i][j] == 'X' ? 1 : 2;    
                }
            }
        }
        // Check vertical win
        for(int i = 0; i < board[0].length; i++){
            for(int j = 0; j < board.length - 3; j++){ 
                if(board[j][i] == board[j+1][i] && board[j+1][i] == board[j+2][i] && board[j+2][i] == board[j+3][i] && board[j][i] != '-'){
                    return board[j][i] == 'X' ? 1 : 2;    
                }
            }
        }
        // Check upwards diagonal win
        for(int i = 0; i < board.length - 3; i++){
            for(int j = 0; j < board[0].length - 3; j++){
                if(board[i][j] == board[i+1][j+1] && board[i+1][j+1] == board[i+2][j+2] && board[i+2][j+2] == board[i+3][j+3] && board[i][j] != '-'){
                    return board[i][j] == 'X' ? 1 : 2; 
                }
            }
        }
        // Check downwards diagonal win
        for(int i = board.length - 3; i < board.length; i++){
            for(int j = 0; j < board[0].length - 3; j++){
                if(board[i][j] == board[i-1][j+1] && board[i-1][j+1] == board[i-2][j+2] && board[i-2][j+2] == board[i-3][j+3] && board[i][j] != '-'){
                    return board[i][j] == 'X' ? 1 : 2; 
                }
            }
        }
        // Check for tie
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == '-') {
                    // unfilled space; game not over
                    return -1;
                }
            }
        }
        // It's a tie
        return 0;
    }

    // Behavior: Checks if the game is over. If not, it will specify whose turn it is.
    // Return: Gives back 1 if it is player 1's turn and 2 if it is player 2's turn. It will return -1 if the game is over.
    public int getNextPlayer(){
        if (isGameOver()) {
            return -1;
        }
        return isXTurn ? 1 : 2;
    }

    // Behavior: Asks the user for which column they would like to place there piece. If the move is valid, their piece will be placed
    // at the lowest space of the column they specified.
    // Exception: If the column is not a valid column of the gameboard or if the columns is ful, an 
    // IllegalArgumentExcepetion will be thrown.
    // Parameters: Scanner input represents the given scanner which will assist in taking in the user's input.
    public void makeMove(Scanner input){
        char currPlayer = isXTurn ? 'X' : 'O';
        System.out.print("Column? ");
        int col = input.nextInt();
        makeMove(col, currPlayer);
        isXTurn = !isXTurn;
    }

    // Behavior: Checks if the column the user specified is a valid place to put a piece. If so, the piece will be placed at the lowest
    // position available at that row.
    // Exception: If the column is not a valid column of the gameboard or if the columns is ful, an 
    // IllegalArgumentExcepetion will be thrown.
    // Parameters: int col represents the inputed column and char player represents which player's turn it is.
    private void makeMove(int col, char player){
        if (col < 0 || col >= board[0].length) {
                throw new IllegalArgumentException("Invalid board position: Column " + col + " does not exist :(" );
        }
        // what is the lowest row position at?
        int lowestIndex = -1;
        for(int i = 0; i < board[0].length - 1; i++){
            if(board[i][col] == '-'){ 
                lowestIndex = i;
            }
        }
        // the column is full
        if(lowestIndex == -1){
            throw new IllegalArgumentException("The column is full!");
        }
        // column was not full
        board[lowestIndex][col] = player;
    }
  
    // Behavior: Goes through the board and makes the empty spaces (-). This is to help visualize the empty spaces.
    private void populateBoard(){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                board[i][j] = '-';
            }
        }
    }
}
